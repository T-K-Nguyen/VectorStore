# Single-line independent tests for ArrayList (TEST mode)
# Syntax: TEST <id> <ops separated by ';'>
# CAP optional; if omitted default capacity used.
# Assertions use pattern OP ... = expected

TEST 1 ADD 1; SIZE = 1; GET 0 = 1; TO_STRING = [1]
TEST 2 ADD 1; ADD 2; SIZE = 2; GET 1 = 2; INDEX_OF 2 = 1; CONTAINS 3 = false
TEST 3 ADD 5; ADD 6; ADD_AT 1 99; TO_STRING = [5, 99, 6]; GET 1 = 99; SIZE = 3
TEST 4 ADD 10; ADD 20; SET 0 30; GET 0 = 30; INDEX_OF 10 = -1; INDEX_OF 30 = 0
TEST 5 ADD 7; ADD 8; REMOVE_AT 0 = 7; SIZE = 1; GET 0 = 8
TEST 6 ADD 1; ADD 2; ADD 3; REMOVE_AT 1 = 2; TO_STRING = [1, 3]
TEST 7 ADD 1; CLEAR; SIZE = 0; EMPTY = true; TO_STRING = []
TEST 8 ADD 1; ADD 1; ADD 1; INDEX_OF 1 = 0; REMOVE_AT 0 = 1; REMOVE_AT 0 = 1; SIZE = 1; TO_STRING = [1]
TEST 9 CAP 1; ADD 5; ADD 6; ADD 7; SIZE = 3; GET 2 = 7
TEST 10 CAP 2; ADD 9; ADD 10; ADD_AT 2 11; ADD_AT 0 8; TO_STRING = [8, 9, 10, 11]; SIZE = 4
TEST 11 ADD 4; ADD 5; SET 1 50; GET 1 = 50; TO_STRING = [4, 50]
TEST 12 ADD 4; ADD 5; SET 1 5; GET 0 = 4; GET 1 = 5; SIZE = 2
TEST 13 ADD 0; ADD 1; ADD 2; ADD 3; SIZE = 4; GET 0 = 0; GET 3 = 3; INDEX_OF 2 = 2
TEST 14 ADD 0; ADD 1; ADD 2; ADD 3; REMOVE_AT 3 = 3; REMOVE_AT 2 = 2; REMOVE_AT 1 = 1; REMOVE_AT 0 = 0; SIZE = 0; EMPTY = true
TEST 15 ADD 100; ADD 200; INDEX_OF 300 = -1; CONTAINS 100 = true; CONTAINS 500 = false
TEST 16 CAP 1; ADD 0; ADD 1; ADD 2; ADD 3; ADD 4; ADD 5; ADD 6; ADD 7; ADD 8; ADD 9; ADD 10; ADD 11; ADD 12; ADD 13; ADD 14; ADD 15; SIZE = 16; GET 0 = 0; GET 15 = 15
TEST 17 ADD 1; ADD_AT 0 2; ADD_AT 0 3; TO_STRING = [3, 2, 1]; SIZE = 3; GET 1 = 2
TEST 18 ADD 1; ADD 2; ADD_AT 2 3; ADD_AT 3 4; TO_STRING = [1, 2, 3, 4]; SIZE = 4
TEST 19 CAP 2; ADD 5; ADD 6; ADD 7; ADD 8; SET 0 50; SET 3 80; GET 0 = 50; GET 3 = 80; SIZE = 4
TEST 20 ADD 0; ADD 1; ADD 2; ADD 3; ADD 4; REMOVE_AT 0 = 0; REMOVE_AT 0 = 1; REMOVE_AT 0 = 2; REMOVE_AT 0 = 3; REMOVE_AT 0 = 4; SIZE = 0; EMPTY = true
TEST 21 ADD 10; ADD 20; ADD 30; ADD 40; REMOVE_AT 3 = 40; REMOVE_AT 2 = 30; REMOVE_AT 1 = 20; REMOVE_AT 0 = 10; SIZE = 0; EMPTY = true
TEST 22 ADD 1; ADD 2; ADD 3; REMOVE_AT 1 = 2; ADD_AT 1 4; TO_STRING = [1, 4, 3]; SIZE = 3; GET 1 = 4
TEST 23 ADD 5; ADD 5; ADD 5; SIZE = 3; INDEX_OF 5 = 0; REMOVE_AT 0 = 5; INDEX_OF 5 = 0; REMOVE_AT 0 = 5; INDEX_OF 5 = 0; REMOVE_AT 0 = 5; SIZE = 0
TEST 24 ADD 1; ADD 2; CLEAR; SIZE = 0; EMPTY = true; CONTAINS 1 = false; INDEX_OF 2 = -1; TO_STRING = []
TEST 25 ADD 0; ADD 1; ADD 2; ADD 3; ADD 4; ADD 5; ADD 6; ADD 7; ADD 8; ADD 9; TO_STRING = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]; SIZE = 10
TEST 26 CAP 2; ADD 1; ADD 2; ADD 3; ADD 4; ADD 5; ADD 6; ADD 7; ADD 8; SIZE = 8; GET 7 = 8; GET 3 = 4
TEST 27 ADD 1; ADD 2; ADD 3; SET 0 9; SET 1 9; SET 2 9; TO_STRING = [9, 9, 9]; INDEX_OF 9 = 0; CONTAINS 5 = false
TEST 28 ADD 1; REMOVE_AT 0 = 1; INDEX_OF 1 = -1; CONTAINS 1 = false; SIZE = 0; EMPTY = true
TEST 29 ADD 1; ADD 2; CLEAR; ADD 3; ADD 4; TO_STRING = [3, 4]; SIZE = 2
TEST 30 ADD -1; ADD -2; ADD_AT 1 -3; TO_STRING = [-1, -3, -2]; INDEX_OF -3 = 1; CONTAINS -4 = false
TEST 31 ADD 10; ADD 20; ADD 30; ADD_AT 1 15; SET 0 5; SET 3 25; TO_STRING = [5, 15, 20, 25]; SIZE = 4; INDEX_OF 25 = 3
TEST 32 CAP 0; ADD 1; ADD 2; ADD 3; SIZE = 3; GET 2 = 3
TEST 33 ADD 1; ADD 2; ADD 3; ADD 4; ADD 5; REMOVE_AT 2 = 3; REMOVE_AT 2 = 4; TO_STRING = [1, 2, 5]; SIZE = 3
TEST 34 ADD 1; ADD 2; ADD 3; REMOVE_AT 1 = 2; ADD 4; ADD_AT 1 9; GET 1 = 9; REMOVE_AT 2 = 3; TO_STRING = [1, 9, 4]; SIZE = 3
TEST 35 ADD 0; ADD 0; ADD 0; INDEX_OF 0 = 0; REMOVE_AT 1 = 0; SIZE = 2; TO_STRING = [0, 0]
TEST 36 ADD 1; ADD 2; SET 1 5; SIZE = 2; GET 1 = 5; TO_STRING = [1, 5]
TEST 37 ADD 1; ADD 2; ADD 3; ADD_AT 0 4; ADD_AT 0 5; TO_STRING = [5, 4, 1, 2, 3]; SIZE = 5; GET 0 = 5; GET 4 = 3
TEST 38 ADD 1; ADD 2; ADD 3; ADD 4; REMOVE_AT 1 = 2; REMOVE_AT 1 = 3; TO_STRING = [1, 4]; SIZE = 2
TEST 39 ADD 1; ADD 2; ADD 3; SET 2 30; REMOVE_AT 2 = 30; SIZE = 2; TO_STRING = [1, 2]
TEST 40 CAP 1; ADD 1; ADD 2; ADD 3; CLEAR; ADD 4; SIZE = 1; TO_STRING = [4]
TEST 41 ADD 1; THROW_GET 1; THROW_GET -1; SIZE = 1
TEST 42 ADD 1; ADD 2; THROW_REMOVE 2; THROW_REMOVE -1; SIZE = 2
TEST 43 THROW_SET 0 5; THROW_GET 0; SIZE = 0; EMPTY = true
TEST 44 CAP 2; ADD 10; ADD 11; ADD 12; ADD 13; SIZE = 4; GET 0 = 10; GET 3 = 13
TEST 45 CAP 2; ADD 1; ADD 2; ADD 3; ADD 4; CLEAR; ADD 5; ADD 6; SIZE = 2; GET 1 = 6
TEST 46 ADD 1; ADD 2; ADD 3; CAP2 5; COPY_NEW; SIZE2 = 3; TO_STRING2 = [1, 2, 3]
TEST 47 ADD 5; ADD 6; COPY_NEW; ADD 7; SIZE = 3; SIZE2 = 2; TO_STRING = [5, 6, 7]; TO_STRING2 = [5, 6]
TEST 48 ADD 9; ADD 8; ADD 7; COPY_NEW; ASSIGN_TO2; SIZE2 = 3; TO_STRING2 = [9, 8, 7]
TEST 49 ADD 1; ADD 2; COPY_NEW; ADD 3; ASSIGN_TO2; SIZE2 = 3; TO_STRING2 = [1, 2, 3]
TEST 50 ADD 4; ADD 5; CAP2 1; ADD 6; ASSIGN_TO2; SIZE2 = 3; TO_STRING2 = [4, 5, 6]
TEST 51 ADD 10; COPY_NEW; SELF_ASSIGN; SIZE = 1; SIZE2 = 1; TO_STRING = [10]
TEST 52 ADD 1; ADD 2; ADD 3; COPY_NEW; REMOVE_AT 1 = 2; SIZE = 2; SIZE2 = 3; TO_STRING2 = [1, 2, 3]
TEST 53 ADD 1; ADD 2; ADD 3; COPY_NEW; REMOVE_AT2 1 = 2; SIZE2 = 2; TO_STRING2 = [1, 3]; TO_STRING = [1, 2, 3]
TEST 54 ADD 1; ADD 2; ADD 3; COPY_NEW; ASSIGN_FROM2; SIZE = 3; TO_STRING = [1, 2, 3]
TEST 55 ADD 1; ADD 2; ADD 3; COPY_NEW; CLEAR; SIZE = 0; SIZE2 = 3; TO_STRING2 = [1, 2, 3]
TEST 56 ADD 1; ADD 2; ADD 3; COPY_NEW; CLEAR2; SIZE2 = 0; SIZE = 3; TO_STRING = [1, 2, 3]
TEST 57 CAP 1; ADD 1; ADD 2; ADD 3; COPY_NEW; ADD 4; ADD 5; SIZE = 5; SIZE2 = 3; TO_STRING2 = [1, 2, 3]
TEST 58 CAP 1; ADD 1; COPY_NEW; ASSIGN_TO2; REMOVE_AT 0 = 1; SIZE = 0; SIZE2 = 1; TO_STRING2 = [1]
TEST 59 CAP 1; ADD 1; ADD 2; COPY_NEW; ASSIGN_TO2; REMOVE_AT2 1 = 2; SIZE2 = 1; TO_STRING2 = [1]
TEST 60 ADD 1; ADD 2; ADD 3; COPY_NEW; SET 1 20; SIZE2 = 3; GET2 1 = 2
TEST 61 ADD 1; ADD 2; ADD 3; COPY_NEW; SET2 1 99; SIZE = 3; GET 1 = 2; GET2 1 = 99
TEST 62 ADD 0; ADD 1; ADD 2; ADD 3; ADD 4; COPY_NEW; REMOVE_AT 4 = 4; REMOVE_AT 3 = 3; REMOVE_AT 0 = 0; SIZE = 2; TO_STRING = [1, 2]; SIZE2 = 5
TEST 63 ADD 5; ADD 6; ADD 7; COPY_NEW; REMOVE_AT2 0 = 5; REMOVE_AT2 1 = 7; SIZE2 = 1; TO_STRING2 = [6]
TEST 64 ADD 1; ADD 2; ADD 3; COPY_NEW; ASSIGN_TO2; ASSIGN_FROM2; SIZE = 3; SIZE2 = 3; TO_STRING = [1, 2, 3]
TEST 65 ADD 2; ADD 4; ADD 6; ADD 8; COPY_NEW; REMOVE_AT 1 = 4; SET 1 99; SIZE = 3; GET 1 = 99; SIZE2 = 4; GET2 2 = 6
TEST 66 CAP 2; ADD 1; ADD 2; ADD 3; ADD 4; ADD 5; ADD 6; COPY_NEW; SIZE = 6; SIZE2 = 6; TO_STRING2 = [1, 2, 3, 4, 5, 6]
TEST 67 CAP 2; ADD 1; ADD 2; ADD 3; ADD 4; COPY_NEW; CLEAR; ASSIGN_FROM2; SIZE = 4; TO_STRING = [1, 2, 3, 4]
TEST 68 ADD 1; ADD 2; ADD 3; ADD 4; COPY_NEW; CLEAR2; ASSIGN_TO2; SIZE2 = 4; TO_STRING2 = [1, 2, 3, 4]
TEST 69 ADD 1; THROW_ADD_AT -1 5; THROW_ADD_AT 2 5; SIZE = 1
TEST 70 ADD 1; ADD 2; THROW_ADD_AT 3 9; THROW_ADD_AT -5 9; SIZE = 2
TEST 71 ADD 1; ADD 2; ADD 3; ITER_SUM = 6; ITER_SEQ = [1, 2, 3]
TEST 72 ADD 5; ADD 6; ADD 7; IT_AT 0 = 5; IT_AT 1 = 6; IT_AT 2 = 7
TEST 73 ADD 10; ADD 11; ADD 12; IT_PRE_INC 1 = 11; IT_PRE_INC 2 = 12
TEST 74 ADD 10; ADD 20; ADD 30; IT_POST_INC 2 = 30
TEST 75 ADD 3; ADD 4; ADD 5; IT_PRE_INC 2 = 5; IT_POST_DEC 2 1 = 4
TEST 76 ADD 1; ADD 2; ADD 3; IT_PRE_INC 2 = 3; IT_PRE_DEC 2 2 = 1
TEST 77 ADD 4; ADD 5; ADD 6; IT_PRE_INC 1 = 5; IT_POST_INC 1 = 5
TEST 78 ADD 9; ADD 8; ADD 7; ITER_SEQ = [9, 8, 7]; ITER_SUM = 24
TEST 79 ADD 0; ADD 1; ADD 2; ADD 3; IT_AT 3 = 3; IT_PRE_DEC 3 1 = 2; IT_PRE_DEC 2 2 = 0
TEST 80 ADD 5; ADD 15; ADD 25; IT_POST_INC 1 = 15; IT_PRE_DEC 2 2 = 5
TEST 81 ADD 1; THROW_IT_DEC; SIZE = 1
TEST 82 ADD 1; THROW_IT_INC; SIZE = 1
TEST 83 ADD 1; THROW_IT_DEREF 1; SIZE = 1
TEST 84 ADD 1; ADD 2; ADD 3; THROW_IT_DEREF 3; SIZE = 3
TEST 85 ADD 10; ADD 20; ADD 30; CLEAR; ITER_SEQ = []; ITER_SUM = 0
TEST 86 CAP 1; ADD 1; ADD 2; ADD 3; ITER_SEQ = [1, 2, 3]; ITER_SUM = 6
TEST 87 ADD 1; ADD 2; ADD 3; COPY_NEW; REMOVE_AT 1 = 2; ITER_SEQ = [1, 3]; SIZE2 = 3; TO_STRING2 = [1, 2, 3]
TEST 88 ADD 1; ADD 2; ADD 3; COPY_NEW; REMOVE_AT2 1 = 2; ITER_SEQ = [1, 2, 3]; SIZE2 = 2; TO_STRING2 = [1, 3]
TEST 89 ADD 1; ADD 2; ADD 3; IT_PRE_INC 1 = 2; IT_POST_INC 1 = 2; THROW_IT_INC
TEST 90 ADD 5; ADD 6; ADD 7; IT_PRE_INC 2 = 7; THROW_IT_DEREF 3; THROW_IT_INC
